{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberUtils = void 0;\n\nvar Directions_1 = require(\"../Enums/Directions\");\n\nvar NumberUtils = /*#__PURE__*/function () {\n  function NumberUtils() {\n    _classCallCheck(this, NumberUtils);\n  }\n\n  _createClass(NumberUtils, null, [{\n    key: \"clamp\",\n    value: function clamp(num, min, max) {\n      return Math.min(Math.max(num, min), max);\n    }\n  }, {\n    key: \"mix\",\n    value: function mix(comp1, comp2, weight1, weight2) {\n      return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n  }, {\n    key: \"randomInRange\",\n    value: function randomInRange(r1, r2) {\n      var max = Math.max(r1, r2),\n          min = Math.min(r1, r2);\n      return Math.random() * (max - min) + min;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(options) {\n      var random = options.random;\n\n      var _ref = typeof random === \"boolean\" ? {\n        enable: random,\n        minimumValue: 0\n      } : random,\n          enable = _ref.enable,\n          minimumValue = _ref.minimumValue;\n\n      return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n    }\n  }, {\n    key: \"getDistances\",\n    value: function getDistances(pointA, pointB) {\n      var dx = pointA.x - pointB.x;\n      var dy = pointA.y - pointB.y;\n      return {\n        dx: dx,\n        dy: dy,\n        distance: Math.sqrt(dx * dx + dy * dy)\n      };\n    }\n  }, {\n    key: \"getDistance\",\n    value: function getDistance(pointA, pointB) {\n      return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n  }, {\n    key: \"getParticleBaseVelocity\",\n    value: function getParticleBaseVelocity(particle) {\n      var velocityBase;\n\n      switch (particle.direction) {\n        case Directions_1.MoveDirection.top:\n          velocityBase = {\n            x: 0,\n            y: -1\n          };\n          break;\n\n        case Directions_1.MoveDirection.topRight:\n          velocityBase = {\n            x: 0.5,\n            y: -0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.right:\n          velocityBase = {\n            x: 1,\n            y: -0\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomRight:\n          velocityBase = {\n            x: 0.5,\n            y: 0.5\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottom:\n          velocityBase = {\n            x: 0,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.bottomLeft:\n          velocityBase = {\n            x: -0.5,\n            y: 1\n          };\n          break;\n\n        case Directions_1.MoveDirection.left:\n          velocityBase = {\n            x: -1,\n            y: 0\n          };\n          break;\n\n        case Directions_1.MoveDirection.topLeft:\n          velocityBase = {\n            x: -0.5,\n            y: -0.5\n          };\n          break;\n\n        default:\n          velocityBase = {\n            x: 0,\n            y: 0\n          };\n          break;\n      }\n\n      return velocityBase;\n    }\n  }, {\n    key: \"rotateVelocity\",\n    value: function rotateVelocity(velocity, angle) {\n      return {\n        horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n        vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle)\n      };\n    }\n  }, {\n    key: \"collisionVelocity\",\n    value: function collisionVelocity(v1, v2, m1, m2) {\n      return {\n        horizontal: v1.horizontal * (m1 - m2) / (m1 + m2) + v2.horizontal * 2 * m2 / (m1 + m2),\n        vertical: v1.vertical\n      };\n    }\n  }]);\n\n  return NumberUtils;\n}();\n\nexports.NumberUtils = NumberUtils;","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Utils/NumberUtils.js"],"names":["Object","defineProperty","exports","value","NumberUtils","Directions_1","require","num","min","max","Math","comp1","comp2","weight1","weight2","floor","r1","r2","random","options","enable","minimumValue","randomInRange","pointA","pointB","dx","x","dy","y","distance","sqrt","getDistances","particle","velocityBase","direction","MoveDirection","top","topRight","right","bottomRight","bottom","bottomLeft","left","topLeft","velocity","angle","horizontal","cos","vertical","sin","v1","v2","m1","m2"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberUtils = void 0;\nconst Directions_1 = require(\"../Enums/Directions\");\nclass NumberUtils {\n    static clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n    }\n    static mix(comp1, comp2, weight1, weight2) {\n        return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n    }\n    static randomInRange(r1, r2) {\n        const max = Math.max(r1, r2), min = Math.min(r1, r2);\n        return Math.random() * (max - min) + min;\n    }\n    static getValue(options) {\n        const random = options.random;\n        const { enable, minimumValue } = typeof random === \"boolean\" ? { enable: random, minimumValue: 0 } : random;\n        return enable ? NumberUtils.randomInRange(minimumValue, options.value) : options.value;\n    }\n    static getDistances(pointA, pointB) {\n        const dx = pointA.x - pointB.x;\n        const dy = pointA.y - pointB.y;\n        return { dx: dx, dy: dy, distance: Math.sqrt(dx * dx + dy * dy) };\n    }\n    static getDistance(pointA, pointB) {\n        return NumberUtils.getDistances(pointA, pointB).distance;\n    }\n    static getParticleBaseVelocity(particle) {\n        let velocityBase;\n        switch (particle.direction) {\n            case Directions_1.MoveDirection.top:\n                velocityBase = { x: 0, y: -1 };\n                break;\n            case Directions_1.MoveDirection.topRight:\n                velocityBase = { x: 0.5, y: -0.5 };\n                break;\n            case Directions_1.MoveDirection.right:\n                velocityBase = { x: 1, y: -0 };\n                break;\n            case Directions_1.MoveDirection.bottomRight:\n                velocityBase = { x: 0.5, y: 0.5 };\n                break;\n            case Directions_1.MoveDirection.bottom:\n                velocityBase = { x: 0, y: 1 };\n                break;\n            case Directions_1.MoveDirection.bottomLeft:\n                velocityBase = { x: -0.5, y: 1 };\n                break;\n            case Directions_1.MoveDirection.left:\n                velocityBase = { x: -1, y: 0 };\n                break;\n            case Directions_1.MoveDirection.topLeft:\n                velocityBase = { x: -0.5, y: -0.5 };\n                break;\n            default:\n                velocityBase = { x: 0, y: 0 };\n                break;\n        }\n        return velocityBase;\n    }\n    static rotateVelocity(velocity, angle) {\n        return {\n            horizontal: velocity.horizontal * Math.cos(angle) - velocity.vertical * Math.sin(angle),\n            vertical: velocity.horizontal * Math.sin(angle) + velocity.vertical * Math.cos(angle),\n        };\n    }\n    static collisionVelocity(v1, v2, m1, m2) {\n        return {\n            horizontal: (v1.horizontal * (m1 - m2)) / (m1 + m2) + (v2.horizontal * 2 * m2) / (m1 + m2),\n            vertical: v1.vertical,\n        };\n    }\n}\nexports.NumberUtils = NumberUtils;\n"]},"metadata":{},"sourceType":"script"}