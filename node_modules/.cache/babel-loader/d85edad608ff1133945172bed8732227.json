{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Lighter = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Modes_1 = require(\"../../Enums/Modes\");\n\nvar Lighter = /*#__PURE__*/function () {\n  function Lighter(container) {\n    _classCallCheck(this, Lighter);\n\n    this.container = container;\n  }\n\n  _createClass(Lighter, [{\n    key: \"interact\",\n    value: function interact() {\n      var container = this.container;\n      var options = container.options;\n\n      if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n        var mousePos = container.interactivity.mouse.position;\n\n        if (!mousePos) {\n          return;\n        }\n\n        container.canvas.drawLight(mousePos);\n      }\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      var container = this.container;\n      var mouse = container.interactivity.mouse;\n      var events = container.options.interactivity.events;\n\n      if (!(events.onHover.enable && mouse.position)) {\n        return false;\n      }\n\n      var hoverMode = events.onHover.mode;\n      return Utils_1.Utils.isInArray(Modes_1.HoverMode.light, hoverMode);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {}\n  }]);\n\n  return Lighter;\n}();\n\nexports.Lighter = Lighter;","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Interactions/External/Lighter.js"],"names":["Object","defineProperty","exports","value","Lighter","Utils_1","require","Modes_1","container","options","interactivity","events","onHover","enable","status","mousePos","mouse","position","canvas","drawLight","hoverMode","mode","Utils","isInArray","HoverMode","light"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAMC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAAvB;;IACMF,O;AACF,mBAAYI,SAAZ,EAAuB;AAAA;;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACH;;;;+BACU;AACP,UAAMA,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMC,OAAO,GAAGD,SAAS,CAACC,OAA1B;;AACA,UAAIA,OAAO,CAACC,aAAR,CAAsBC,MAAtB,CAA6BC,OAA7B,CAAqCC,MAArC,IAA+CL,SAAS,CAACE,aAAV,CAAwBI,MAAxB,KAAmC,WAAtF,EAAmG;AAC/F,YAAMC,QAAQ,GAAGP,SAAS,CAACE,aAAV,CAAwBM,KAAxB,CAA8BC,QAA/C;;AACA,YAAI,CAACF,QAAL,EAAe;AACX;AACH;;AACDP,QAAAA,SAAS,CAACU,MAAV,CAAiBC,SAAjB,CAA2BJ,QAA3B;AACH;AACJ;;;gCACW;AACR,UAAMP,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMQ,KAAK,GAAGR,SAAS,CAACE,aAAV,CAAwBM,KAAtC;AACA,UAAML,MAAM,GAAGH,SAAS,CAACC,OAAV,CAAkBC,aAAlB,CAAgCC,MAA/C;;AACA,UAAI,EAAEA,MAAM,CAACC,OAAP,CAAeC,MAAf,IAAyBG,KAAK,CAACC,QAAjC,CAAJ,EAAgD;AAC5C,eAAO,KAAP;AACH;;AACD,UAAMG,SAAS,GAAGT,MAAM,CAACC,OAAP,CAAeS,IAAjC;AACA,aAAOhB,OAAO,CAACiB,KAAR,CAAcC,SAAd,CAAwBhB,OAAO,CAACiB,SAAR,CAAkBC,KAA1C,EAAiDL,SAAjD,CAAP;AACH;;;4BACO,CACP;;;;;;AAELlB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Lighter = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Modes_1 = require(\"../../Enums/Modes\");\nclass Lighter {\n    constructor(container) {\n        this.container = container;\n    }\n    interact() {\n        const container = this.container;\n        const options = container.options;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"mousemove\") {\n            const mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n                return;\n            }\n            container.canvas.drawLight(mousePos);\n        }\n    }\n    isEnabled() {\n        const container = this.container;\n        const mouse = container.interactivity.mouse;\n        const events = container.options.interactivity.events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        return Utils_1.Utils.isInArray(Modes_1.HoverMode.light, hoverMode);\n    }\n    reset() {\n    }\n}\nexports.Lighter = Lighter;\n"]},"metadata":{},"sourceType":"script"}