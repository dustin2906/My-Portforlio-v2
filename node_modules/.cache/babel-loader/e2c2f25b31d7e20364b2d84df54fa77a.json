{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nvar Utils_1 = require(\"../../Utils\");\n\nvar Enums_1 = require(\"../../Enums\");\n\nvar Mover = /*#__PURE__*/function () {\n  function Mover(container, particle) {\n    _classCallCheck(this, Mover);\n\n    this.container = container;\n    this.particle = particle;\n  }\n\n  _createClass(Mover, [{\n    key: \"move\",\n    value: function move(delta) {\n      var particle = this.particle;\n      particle.bubble.inRange = false;\n      particle.links = [];\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (particle.destroyed) {\n            break;\n          }\n\n          if (plugin.particleUpdate) {\n            plugin.particleUpdate(particle, delta);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (particle.destroyed) {\n        return;\n      }\n\n      this.moveParticle(delta);\n      this.moveParallax();\n    }\n  }, {\n    key: \"moveParticle\",\n    value: function moveParticle(delta) {\n      var _a, _b;\n\n      var particle = this.particle;\n      var particlesOptions = particle.particlesOptions;\n\n      if (!particlesOptions.move.enable) {\n        return;\n      }\n\n      var container = this.container;\n      var slowFactor = this.getProximitySpeedFactor();\n      var baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n      var maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n      var sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n      var moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n      this.applyNoise(delta);\n      var gravityOptions = particlesOptions.move.gravity;\n\n      if (gravityOptions.enable) {\n        particle.velocity.vertical += gravityOptions.acceleration * delta.factor / (60 * moveSpeed);\n      }\n\n      var velocity = {\n        horizontal: particle.velocity.horizontal * moveSpeed,\n        vertical: particle.velocity.vertical * moveSpeed\n      };\n\n      if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n        velocity.vertical = gravityOptions.maxSpeed;\n        particle.velocity.vertical = velocity.vertical / moveSpeed;\n      }\n\n      particle.position.x += velocity.horizontal;\n      particle.position.y += velocity.vertical;\n\n      if (particlesOptions.move.vibrate) {\n        particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n        particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n      }\n\n      var initialPosition = particle.initialPosition;\n      var initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n\n      if (particle.maxDistance) {\n        if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n          particle.misplaced = initialDistance > particle.maxDistance;\n          particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n          particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n        } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          if (particle.position.x < initialPosition.x && particle.velocity.horizontal < 0 || particle.position.x > initialPosition.x && particle.velocity.horizontal > 0) {\n            particle.velocity.horizontal *= -Math.random();\n          }\n\n          if (particle.position.y < initialPosition.y && particle.velocity.vertical < 0 || particle.position.y > initialPosition.y && particle.velocity.vertical > 0) {\n            particle.velocity.vertical *= -Math.random();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"applyNoise\",\n    value: function applyNoise(delta) {\n      var particle = this.particle;\n      var particlesOptions = particle.particlesOptions;\n      var noiseOptions = particlesOptions.move.noise;\n      var noiseEnabled = noiseOptions.enable;\n\n      if (!noiseEnabled) {\n        return;\n      }\n\n      var container = this.container;\n\n      if (particle.lastNoiseTime <= particle.noiseDelay) {\n        particle.lastNoiseTime += delta.value;\n        return;\n      }\n\n      var noise = container.noise.generate(particle);\n      particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n      particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n      particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n      particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n      particle.lastNoiseTime -= particle.noiseDelay;\n    }\n  }, {\n    key: \"moveParallax\",\n    value: function moveParallax() {\n      var container = this.container;\n      var options = container.options;\n\n      if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n        return;\n      }\n\n      var particle = this.particle;\n      var parallaxForce = options.interactivity.events.onHover.parallax.force;\n      var mousePos = container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return;\n      }\n\n      var windowDimension = {\n        height: window.innerHeight / 2,\n        width: window.innerWidth / 2\n      };\n      var parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n      var factor = particle.getRadius() / parallaxForce;\n      var tmp = {\n        x: (mousePos.x - windowDimension.width) * factor,\n        y: (mousePos.y - windowDimension.height) * factor\n      };\n      particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n      particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n  }, {\n    key: \"getProximitySpeedFactor\",\n    value: function getProximitySpeedFactor() {\n      var container = this.container;\n      var options = container.options;\n      var active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n      if (!active) {\n        return 1;\n      }\n\n      var mousePos = this.container.interactivity.mouse.position;\n\n      if (!mousePos) {\n        return 1;\n      }\n\n      var particlePos = this.particle.getPosition();\n      var dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n      var radius = container.retina.slowModeRadius;\n\n      if (dist > radius) {\n        return 1;\n      }\n\n      var proximityFactor = dist / radius || 0;\n      var slowFactor = options.interactivity.modes.slow.factor;\n      return proximityFactor / slowFactor;\n    }\n  }]);\n\n  return Mover;\n}();\n\nexports.Mover = Mover;","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","container","particle","delta","bubble","inRange","links","plugins","plugin","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","particlesOptions","move","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","retina","reduceFactor","maxSize","sizeValue","sizeFactor","size","getRadius","factor","applyNoise","gravityOptions","gravity","velocity","vertical","acceleration","horizontal","maxSpeed","position","x","y","vibrate","Math","sin","cos","initialPosition","initialDistance","NumberUtils","getDistance","maxDistance","misplaced","random","noiseOptions","noise","noiseEnabled","lastNoiseTime","noiseDelay","generate","angle","length","clamp","options","Utils","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","windowDimension","height","window","innerHeight","width","innerWidth","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : container.retina.moveSpeed) * container.retina.reduceFactor;\n        const maxSize = (_b = particle.sizeValue) !== null && _b !== void 0 ? _b : container.retina.sizeValue;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        this.applyNoise(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        if (gravityOptions.enable) {\n            particle.velocity.vertical += (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n        }\n        const velocity = {\n            horizontal: particle.velocity.horizontal * moveSpeed,\n            vertical: particle.velocity.vertical * moveSpeed,\n        };\n        if (gravityOptions.enable && velocity.vertical >= gravityOptions.maxSpeed && gravityOptions.maxSpeed > 0) {\n            velocity.vertical = gravityOptions.maxSpeed;\n            particle.velocity.vertical = velocity.vertical / moveSpeed;\n        }\n        particle.position.x += velocity.horizontal;\n        particle.position.y += velocity.vertical;\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.NumberUtils.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.horizontal = particle.velocity.vertical / 2 - particle.velocity.horizontal;\n                particle.velocity.vertical = particle.velocity.horizontal / 2 - particle.velocity.vertical;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.horizontal < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.horizontal > 0)) {\n                    particle.velocity.horizontal *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.vertical < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.vertical > 0)) {\n                    particle.velocity.vertical *= -Math.random();\n                }\n            }\n        }\n    }\n    applyNoise(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.particlesOptions;\n        const noiseOptions = particlesOptions.move.noise;\n        const noiseEnabled = noiseOptions.enable;\n        if (!noiseEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastNoiseTime <= particle.noiseDelay) {\n            particle.lastNoiseTime += delta.value;\n            return;\n        }\n        const noise = container.noise.generate(particle);\n        particle.velocity.horizontal += Math.cos(noise.angle) * noise.length;\n        particle.velocity.horizontal = Utils_1.NumberUtils.clamp(particle.velocity.horizontal, -1, 1);\n        particle.velocity.vertical += Math.sin(noise.angle) * noise.length;\n        particle.velocity.vertical = Utils_1.NumberUtils.clamp(particle.velocity.vertical, -1, 1);\n        particle.lastNoiseTime -= particle.noiseDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.options;\n        if (Utils_1.Utils.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const windowDimension = {\n            height: window.innerHeight / 2,\n            width: window.innerWidth / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - windowDimension.width) * factor,\n            y: (mousePos.y - windowDimension.height) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.options;\n        const active = Utils_1.Utils.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.NumberUtils.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"]},"metadata":{},"sourceType":"script"}