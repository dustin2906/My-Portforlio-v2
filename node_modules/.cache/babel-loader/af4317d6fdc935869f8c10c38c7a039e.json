{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CanvasUtils = void 0;\n\nvar ColorUtils_1 = require(\"./ColorUtils\");\n\nvar NumberUtils_1 = require(\"./NumberUtils\");\n\nvar CanvasUtils = /*#__PURE__*/function () {\n  function CanvasUtils() {\n    _classCallCheck(this, CanvasUtils);\n  }\n\n  _createClass(CanvasUtils, null, [{\n    key: \"paintBase\",\n    value: function paintBase(context, dimension, baseColor) {\n      context.save();\n      context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n      context.fillRect(0, 0, dimension.width, dimension.height);\n      context.restore();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(context, dimension) {\n      context.clearRect(0, 0, dimension.width, dimension.height);\n    }\n  }, {\n    key: \"drawLinkLine\",\n    value: function drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n      var drawn = false;\n\n      if (NumberUtils_1.NumberUtils.getDistance(begin, end) <= maxDistance) {\n        CanvasUtils.drawLine(context, begin, end);\n        drawn = true;\n      } else if (warp) {\n        var pi1;\n        var pi2;\n        var endNE = {\n          x: end.x - canvasSize.width,\n          y: end.y\n        };\n        var d1 = NumberUtils_1.NumberUtils.getDistances(begin, endNE);\n\n        if (d1.distance <= maxDistance) {\n          var yi = begin.y - d1.dy / d1.dx * begin.x;\n          pi1 = {\n            x: 0,\n            y: yi\n          };\n          pi2 = {\n            x: canvasSize.width,\n            y: yi\n          };\n        } else {\n          var endSW = {\n            x: end.x,\n            y: end.y - canvasSize.height\n          };\n          var d2 = NumberUtils_1.NumberUtils.getDistances(begin, endSW);\n\n          if (d2.distance <= maxDistance) {\n            var _yi = begin.y - d2.dy / d2.dx * begin.x;\n\n            var xi = -_yi / (d2.dy / d2.dx);\n            pi1 = {\n              x: xi,\n              y: 0\n            };\n            pi2 = {\n              x: xi,\n              y: canvasSize.height\n            };\n          } else {\n            var endSE = {\n              x: end.x - canvasSize.width,\n              y: end.y - canvasSize.height\n            };\n            var d3 = NumberUtils_1.NumberUtils.getDistances(begin, endSE);\n\n            if (d3.distance <= maxDistance) {\n              var _yi2 = begin.y - d3.dy / d3.dx * begin.x;\n\n              var _xi = -_yi2 / (d3.dy / d3.dx);\n\n              pi1 = {\n                x: _xi,\n                y: _yi2\n              };\n              pi2 = {\n                x: pi1.x + canvasSize.width,\n                y: pi1.y + canvasSize.height\n              };\n            }\n          }\n        }\n\n        if (pi1 && pi2) {\n          CanvasUtils.drawLine(context, begin, pi1);\n          CanvasUtils.drawLine(context, end, pi2);\n          drawn = true;\n        }\n      }\n\n      if (!drawn) {\n        return;\n      }\n\n      context.lineWidth = width;\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n      }\n\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n\n      if (shadow.enable) {\n        var shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n\n        if (shadowColor) {\n          context.shadowBlur = shadow.blur;\n          context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n        }\n      }\n\n      context.stroke();\n    }\n  }, {\n    key: \"drawLinkTriangle\",\n    value: function drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n      CanvasUtils.drawTriangle(context, pos1, pos2, pos3);\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n      }\n\n      context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n      context.fill();\n    }\n  }, {\n    key: \"drawConnectLine\",\n    value: function drawConnectLine(context, width, lineStyle, begin, end) {\n      context.save();\n      CanvasUtils.drawLine(context, begin, end);\n      context.lineWidth = width;\n      context.strokeStyle = lineStyle;\n      context.stroke();\n      context.restore();\n    }\n  }, {\n    key: \"gradient\",\n    value: function gradient(context, p1, p2, opacity) {\n      var gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n      var color1 = p1.getFillColor();\n      var color2 = p2.getFillColor();\n\n      if (!color1 || !color2) {\n        return;\n      }\n\n      var sourcePos = p1.getPosition();\n      var destPos = p2.getPosition();\n      var midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.getRadius(), p2.getRadius());\n      var grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n      grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n      grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n      grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n      return grad;\n    }\n  }, {\n    key: \"drawGrabLine\",\n    value: function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n      context.save();\n      CanvasUtils.drawLine(context, begin, end);\n      context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n      context.lineWidth = width;\n      context.stroke();\n      context.restore();\n    }\n  }, {\n    key: \"drawLight\",\n    value: function drawLight(container, context, mousePos) {\n      var lightOptions = container.options.interactivity.modes.light.area;\n      context.beginPath();\n      context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);\n      var gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);\n      var gradient = lightOptions.gradient;\n      var gradientRgb = {\n        start: ColorUtils_1.ColorUtils.colorToRgb(gradient.start),\n        stop: ColorUtils_1.ColorUtils.colorToRgb(gradient.stop)\n      };\n\n      if (!gradientRgb.start || !gradientRgb.stop) {\n        return;\n      }\n\n      gradientAmbientLight.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.start));\n      gradientAmbientLight.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.stop));\n      context.fillStyle = gradientAmbientLight;\n      context.fill();\n    }\n  }, {\n    key: \"drawParticleShadow\",\n    value: function drawParticleShadow(container, context, particle, mousePos) {\n      var pos = particle.getPosition();\n      var shadowOptions = container.options.interactivity.modes.light.shadow;\n      context.save();\n      var radius = particle.getRadius();\n      var sides = particle.sides;\n      var full = Math.PI * 2 / sides;\n      var angle = -particle.rotate.value + Math.PI / 4;\n      var factor = 1;\n      var dots = [];\n\n      for (var i = 0; i < sides; i++) {\n        dots.push({\n          x: pos.x + radius * Math.sin(angle + full * i) * factor,\n          y: pos.y + radius * Math.cos(angle + full * i) * factor\n        });\n      }\n\n      var points = [];\n      var shadowLength = shadowOptions.length;\n\n      for (var _i = 0, _dots = dots; _i < _dots.length; _i++) {\n        var dot = _dots[_i];\n        var dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);\n        var endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);\n        var endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);\n        points.push({\n          endX: endX,\n          endY: endY,\n          startX: dot.x,\n          startY: dot.y\n        });\n      }\n\n      var shadowRgb = ColorUtils_1.ColorUtils.colorToRgb(shadowOptions.color);\n\n      if (!shadowRgb) {\n        return;\n      }\n\n      var shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowRgb);\n\n      for (var _i2 = points.length - 1; _i2 >= 0; _i2--) {\n        var n = _i2 == points.length - 1 ? 0 : _i2 + 1;\n        context.beginPath();\n        context.moveTo(points[_i2].startX, points[_i2].startY);\n        context.lineTo(points[n].startX, points[n].startY);\n        context.lineTo(points[n].endX, points[n].endY);\n        context.lineTo(points[_i2].endX, points[_i2].endY);\n        context.fillStyle = shadowColor;\n        context.fill();\n      }\n\n      context.restore();\n    }\n  }, {\n    key: \"drawParticle\",\n    value: function drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n      var pos = particle.getPosition();\n      context.save();\n      context.translate(pos.x, pos.y);\n      context.beginPath();\n      var angle = particle.rotate.value + (particle.particlesOptions.rotate.path ? particle.pathAngle : 0);\n\n      if (angle !== 0) {\n        context.rotate(angle);\n      }\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n      }\n\n      var shadowColor = particle.shadowColor;\n\n      if (shadow.enable && shadowColor) {\n        context.shadowBlur = shadow.blur;\n        context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n        context.shadowOffsetX = shadow.offset.x;\n        context.shadowOffsetY = shadow.offset.y;\n      }\n\n      if (fillColorValue) {\n        context.fillStyle = fillColorValue;\n      }\n\n      var stroke = particle.stroke;\n      context.lineWidth = particle.strokeWidth;\n\n      if (strokeColorValue) {\n        context.strokeStyle = strokeColorValue;\n      }\n\n      CanvasUtils.drawShape(container, context, particle, radius, opacity, delta);\n\n      if (stroke.width > 0) {\n        context.stroke();\n      }\n\n      if (particle.close) {\n        context.closePath();\n      }\n\n      if (particle.fill) {\n        context.fill();\n      }\n\n      context.restore();\n      context.save();\n      context.translate(pos.x, pos.y);\n\n      if (angle !== 0) {\n        context.rotate(angle);\n      }\n\n      if (backgroundMask) {\n        context.globalCompositeOperation = composite;\n      }\n\n      CanvasUtils.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n      context.restore();\n    }\n  }, {\n    key: \"drawShape\",\n    value: function drawShape(container, context, particle, radius, opacity, delta) {\n      if (!particle.shape) {\n        return;\n      }\n\n      var drawer = container.drawers.get(particle.shape);\n\n      if (!drawer) {\n        return;\n      }\n\n      drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n  }, {\n    key: \"drawShapeAfterEffect\",\n    value: function drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n      if (!particle.shape) {\n        return;\n      }\n\n      var drawer = container.drawers.get(particle.shape);\n\n      if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n        return;\n      }\n\n      drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n  }, {\n    key: \"drawPlugin\",\n    value: function drawPlugin(context, plugin, delta) {\n      if (plugin.draw !== undefined) {\n        context.save();\n        plugin.draw(context, delta);\n        context.restore();\n      }\n    }\n  }, {\n    key: \"drawLine\",\n    value: function drawLine(context, begin, end) {\n      context.beginPath();\n      context.moveTo(begin.x, begin.y);\n      context.lineTo(end.x, end.y);\n      context.closePath();\n    }\n  }, {\n    key: \"drawTriangle\",\n    value: function drawTriangle(context, p1, p2, p3) {\n      context.beginPath();\n      context.moveTo(p1.x, p1.y);\n      context.lineTo(p2.x, p2.y);\n      context.lineTo(p3.x, p3.y);\n      context.closePath();\n    }\n  }]);\n\n  return CanvasUtils;\n}();\n\nexports.CanvasUtils = CanvasUtils;","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Utils/CanvasUtils.js"],"names":["Object","defineProperty","exports","value","CanvasUtils","ColorUtils_1","require","NumberUtils_1","context","dimension","baseColor","save","fillStyle","fillRect","width","height","restore","clearRect","begin","end","maxDistance","canvasSize","warp","backgroundMask","composite","colorLine","opacity","shadow","drawn","NumberUtils","getDistance","drawLine","pi1","pi2","endNE","x","y","d1","getDistances","distance","yi","dy","dx","endSW","d2","xi","endSE","d3","lineWidth","globalCompositeOperation","strokeStyle","ColorUtils","getStyleFromRgb","enable","shadowColor","colorToRgb","color","shadowBlur","blur","stroke","pos1","pos2","pos3","colorTriangle","opacityTriangle","drawTriangle","fill","lineStyle","p1","p2","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","mix","grad","createLinearGradient","addColorStop","getStyleFromHsl","container","mousePos","lightOptions","options","interactivity","modes","light","area","beginPath","arc","radius","PI","gradientAmbientLight","createRadialGradient","gradient","gradientRgb","start","stop","particle","pos","shadowOptions","sides","full","angle","rotate","factor","dots","i","push","sin","cos","points","shadowLength","length","dot","dotAngle","atan2","endX","endY","startX","startY","shadowRgb","n","moveTo","lineTo","delta","fillColorValue","strokeColorValue","translate","particlesOptions","path","pathAngle","shadowOffsetX","offset","shadowOffsetY","strokeWidth","drawShape","close","closePath","drawShapeAfterEffect","shape","drawer","drawers","get","draw","retina","pixelRatio","afterEffect","plugin","undefined","p3"],"mappings":"AAAA;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,IAAMC,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA7B;;IACMF,W;;;;;;;8BACeI,O,EAASC,S,EAAWC,S,EAAW;AAC5CF,MAAAA,OAAO,CAACG,IAAR;AACAH,MAAAA,OAAO,CAACI,SAAR,GAAoBF,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6CA,SAA7C,GAAyD,eAA7E;AACAF,MAAAA,OAAO,CAACK,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBJ,SAAS,CAACK,KAAjC,EAAwCL,SAAS,CAACM,MAAlD;AACAP,MAAAA,OAAO,CAACQ,OAAR;AACH;;;0BACYR,O,EAASC,S,EAAW;AAC7BD,MAAAA,OAAO,CAACS,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBR,SAAS,CAACK,KAAlC,EAAyCL,SAAS,CAACM,MAAnD;AACH;;;iCACmBP,O,EAASM,K,EAAOI,K,EAAOC,G,EAAKC,W,EAAaC,U,EAAYC,I,EAAMC,c,EAAgBC,S,EAAWC,S,EAAWC,O,EAASC,M,EAAQ;AAClI,UAAIC,KAAK,GAAG,KAAZ;;AACA,UAAIrB,aAAa,CAACsB,WAAd,CAA0BC,WAA1B,CAAsCZ,KAAtC,EAA6CC,GAA7C,KAAqDC,WAAzD,EAAsE;AAClEhB,QAAAA,WAAW,CAAC2B,QAAZ,CAAqBvB,OAArB,EAA8BU,KAA9B,EAAqCC,GAArC;AACAS,QAAAA,KAAK,GAAG,IAAR;AACH,OAHD,MAIK,IAAIN,IAAJ,EAAU;AACX,YAAIU,GAAJ;AACA,YAAIC,GAAJ;AACA,YAAMC,KAAK,GAAG;AACVC,UAAAA,CAAC,EAAEhB,GAAG,CAACgB,CAAJ,GAAQd,UAAU,CAACP,KADZ;AAEVsB,UAAAA,CAAC,EAAEjB,GAAG,CAACiB;AAFG,SAAd;AAIA,YAAMC,EAAE,GAAG9B,aAAa,CAACsB,WAAd,CAA0BS,YAA1B,CAAuCpB,KAAvC,EAA8CgB,KAA9C,CAAX;;AACA,YAAIG,EAAE,CAACE,QAAH,IAAenB,WAAnB,EAAgC;AAC5B,cAAMoB,EAAE,GAAGtB,KAAK,CAACkB,CAAN,GAAWC,EAAE,CAACI,EAAH,GAAQJ,EAAE,CAACK,EAAZ,GAAkBxB,KAAK,CAACiB,CAA7C;AACAH,UAAAA,GAAG,GAAG;AAAEG,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAEI;AAAX,WAAN;AACAP,UAAAA,GAAG,GAAG;AAAEE,YAAAA,CAAC,EAAEd,UAAU,CAACP,KAAhB;AAAuBsB,YAAAA,CAAC,EAAEI;AAA1B,WAAN;AACH,SAJD,MAKK;AACD,cAAMG,KAAK,GAAG;AACVR,YAAAA,CAAC,EAAEhB,GAAG,CAACgB,CADG;AAEVC,YAAAA,CAAC,EAAEjB,GAAG,CAACiB,CAAJ,GAAQf,UAAU,CAACN;AAFZ,WAAd;AAIA,cAAM6B,EAAE,GAAGrC,aAAa,CAACsB,WAAd,CAA0BS,YAA1B,CAAuCpB,KAAvC,EAA8CyB,KAA9C,CAAX;;AACA,cAAIC,EAAE,CAACL,QAAH,IAAenB,WAAnB,EAAgC;AAC5B,gBAAMoB,GAAE,GAAGtB,KAAK,CAACkB,CAAN,GAAWQ,EAAE,CAACH,EAAH,GAAQG,EAAE,CAACF,EAAZ,GAAkBxB,KAAK,CAACiB,CAA7C;;AACA,gBAAMU,EAAE,GAAG,CAACL,GAAD,IAAOI,EAAE,CAACH,EAAH,GAAQG,EAAE,CAACF,EAAlB,CAAX;AACAV,YAAAA,GAAG,GAAG;AAAEG,cAAAA,CAAC,EAAEU,EAAL;AAAST,cAAAA,CAAC,EAAE;AAAZ,aAAN;AACAH,YAAAA,GAAG,GAAG;AAAEE,cAAAA,CAAC,EAAEU,EAAL;AAAST,cAAAA,CAAC,EAAEf,UAAU,CAACN;AAAvB,aAAN;AACH,WALD,MAMK;AACD,gBAAM+B,KAAK,GAAG;AACVX,cAAAA,CAAC,EAAEhB,GAAG,CAACgB,CAAJ,GAAQd,UAAU,CAACP,KADZ;AAEVsB,cAAAA,CAAC,EAAEjB,GAAG,CAACiB,CAAJ,GAAQf,UAAU,CAACN;AAFZ,aAAd;AAIA,gBAAMgC,EAAE,GAAGxC,aAAa,CAACsB,WAAd,CAA0BS,YAA1B,CAAuCpB,KAAvC,EAA8C4B,KAA9C,CAAX;;AACA,gBAAIC,EAAE,CAACR,QAAH,IAAenB,WAAnB,EAAgC;AAC5B,kBAAMoB,IAAE,GAAGtB,KAAK,CAACkB,CAAN,GAAWW,EAAE,CAACN,EAAH,GAAQM,EAAE,CAACL,EAAZ,GAAkBxB,KAAK,CAACiB,CAA7C;;AACA,kBAAMU,GAAE,GAAG,CAACL,IAAD,IAAOO,EAAE,CAACN,EAAH,GAAQM,EAAE,CAACL,EAAlB,CAAX;;AACAV,cAAAA,GAAG,GAAG;AAAEG,gBAAAA,CAAC,EAAEU,GAAL;AAAST,gBAAAA,CAAC,EAAEI;AAAZ,eAAN;AACAP,cAAAA,GAAG,GAAG;AAAEE,gBAAAA,CAAC,EAAEH,GAAG,CAACG,CAAJ,GAAQd,UAAU,CAACP,KAAxB;AAA+BsB,gBAAAA,CAAC,EAAEJ,GAAG,CAACI,CAAJ,GAAQf,UAAU,CAACN;AAArD,eAAN;AACH;AACJ;AACJ;;AACD,YAAIiB,GAAG,IAAIC,GAAX,EAAgB;AACZ7B,UAAAA,WAAW,CAAC2B,QAAZ,CAAqBvB,OAArB,EAA8BU,KAA9B,EAAqCc,GAArC;AACA5B,UAAAA,WAAW,CAAC2B,QAAZ,CAAqBvB,OAArB,EAA8BW,GAA9B,EAAmCc,GAAnC;AACAL,UAAAA,KAAK,GAAG,IAAR;AACH;AACJ;;AACD,UAAI,CAACA,KAAL,EAAY;AACR;AACH;;AACDpB,MAAAA,OAAO,CAACwC,SAAR,GAAoBlC,KAApB;;AACA,UAAIS,cAAJ,EAAoB;AAChBf,QAAAA,OAAO,CAACyC,wBAAR,GAAmCzB,SAAnC;AACH;;AACDhB,MAAAA,OAAO,CAAC0C,WAAR,GAAsB7C,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwC3B,SAAxC,EAAmDC,OAAnD,CAAtB;;AACA,UAAIC,MAAM,CAAC0B,MAAX,EAAmB;AACf,YAAMC,WAAW,GAAGjD,YAAY,CAAC8C,UAAb,CAAwBI,UAAxB,CAAmC5B,MAAM,CAAC6B,KAA1C,CAApB;;AACA,YAAIF,WAAJ,EAAiB;AACb9C,UAAAA,OAAO,CAACiD,UAAR,GAAqB9B,MAAM,CAAC+B,IAA5B;AACAlD,UAAAA,OAAO,CAAC8C,WAAR,GAAsBjD,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwCE,WAAxC,CAAtB;AACH;AACJ;;AACD9C,MAAAA,OAAO,CAACmD,MAAR;AACH;;;qCACuBnD,O,EAASoD,I,EAAMC,I,EAAMC,I,EAAMvC,c,EAAgBC,S,EAAWuC,a,EAAeC,e,EAAiB;AAC1G5D,MAAAA,WAAW,CAAC6D,YAAZ,CAAyBzD,OAAzB,EAAkCoD,IAAlC,EAAwCC,IAAxC,EAA8CC,IAA9C;;AACA,UAAIvC,cAAJ,EAAoB;AAChBf,QAAAA,OAAO,CAACyC,wBAAR,GAAmCzB,SAAnC;AACH;;AACDhB,MAAAA,OAAO,CAACI,SAAR,GAAoBP,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwCW,aAAxC,EAAuDC,eAAvD,CAApB;AACAxD,MAAAA,OAAO,CAAC0D,IAAR;AACH;;;oCACsB1D,O,EAASM,K,EAAOqD,S,EAAWjD,K,EAAOC,G,EAAK;AAC1DX,MAAAA,OAAO,CAACG,IAAR;AACAP,MAAAA,WAAW,CAAC2B,QAAZ,CAAqBvB,OAArB,EAA8BU,KAA9B,EAAqCC,GAArC;AACAX,MAAAA,OAAO,CAACwC,SAAR,GAAoBlC,KAApB;AACAN,MAAAA,OAAO,CAAC0C,WAAR,GAAsBiB,SAAtB;AACA3D,MAAAA,OAAO,CAACmD,MAAR;AACAnD,MAAAA,OAAO,CAACQ,OAAR;AACH;;;6BACeR,O,EAAS4D,E,EAAIC,E,EAAI3C,O,EAAS;AACtC,UAAM4C,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,EAAE,CAACI,SAAH,KAAiBL,EAAE,CAACK,SAAH,EAA5B,CAAjB;AACA,UAAMC,MAAM,GAAGN,EAAE,CAACO,YAAH,EAAf;AACA,UAAMC,MAAM,GAAGP,EAAE,CAACM,YAAH,EAAf;;AACA,UAAI,CAACD,MAAD,IAAW,CAACE,MAAhB,EAAwB;AACpB;AACH;;AACD,UAAMC,SAAS,GAAGT,EAAE,CAACU,WAAH,EAAlB;AACA,UAAMC,OAAO,GAAGV,EAAE,CAACS,WAAH,EAAhB;AACA,UAAME,MAAM,GAAG3E,YAAY,CAAC8C,UAAb,CAAwB8B,GAAxB,CAA4BP,MAA5B,EAAoCE,MAApC,EAA4CR,EAAE,CAACK,SAAH,EAA5C,EAA4DJ,EAAE,CAACI,SAAH,EAA5D,CAAf;AACA,UAAMS,IAAI,GAAG1E,OAAO,CAAC2E,oBAAR,CAA6BN,SAAS,CAAC1C,CAAvC,EAA0C0C,SAAS,CAACzC,CAApD,EAAuD2C,OAAO,CAAC5C,CAA/D,EAAkE4C,OAAO,CAAC3C,CAA1E,CAAb;AACA8C,MAAAA,IAAI,CAACE,YAAL,CAAkB,CAAlB,EAAqB/E,YAAY,CAAC8C,UAAb,CAAwBkC,eAAxB,CAAwCX,MAAxC,EAAgDhD,OAAhD,CAArB;AACAwD,MAAAA,IAAI,CAACE,YAAL,CAAkBd,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBA,QAArC,EAA+CjE,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwC4B,MAAxC,EAAgDtD,OAAhD,CAA/C;AACAwD,MAAAA,IAAI,CAACE,YAAL,CAAkB,CAAlB,EAAqB/E,YAAY,CAAC8C,UAAb,CAAwBkC,eAAxB,CAAwCT,MAAxC,EAAgDlD,OAAhD,CAArB;AACA,aAAOwD,IAAP;AACH;;;iCACmB1E,O,EAASM,K,EAAOI,K,EAAOC,G,EAAKM,S,EAAWC,O,EAAS;AAChElB,MAAAA,OAAO,CAACG,IAAR;AACAP,MAAAA,WAAW,CAAC2B,QAAZ,CAAqBvB,OAArB,EAA8BU,KAA9B,EAAqCC,GAArC;AACAX,MAAAA,OAAO,CAAC0C,WAAR,GAAsB7C,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwC3B,SAAxC,EAAmDC,OAAnD,CAAtB;AACAlB,MAAAA,OAAO,CAACwC,SAAR,GAAoBlC,KAApB;AACAN,MAAAA,OAAO,CAACmD,MAAR;AACAnD,MAAAA,OAAO,CAACQ,OAAR;AACH;;;8BACgBsE,S,EAAW9E,O,EAAS+E,Q,EAAU;AAC3C,UAAMC,YAAY,GAAGF,SAAS,CAACG,OAAV,CAAkBC,aAAlB,CAAgCC,KAAhC,CAAsCC,KAAtC,CAA4CC,IAAjE;AACArF,MAAAA,OAAO,CAACsF,SAAR;AACAtF,MAAAA,OAAO,CAACuF,GAAR,CAAYR,QAAQ,CAACpD,CAArB,EAAwBoD,QAAQ,CAACnD,CAAjC,EAAoCoD,YAAY,CAACQ,MAAjD,EAAyD,CAAzD,EAA4D,IAAIzB,IAAI,CAAC0B,EAArE;AACA,UAAMC,oBAAoB,GAAG1F,OAAO,CAAC2F,oBAAR,CAA6BZ,QAAQ,CAACpD,CAAtC,EAAyCoD,QAAQ,CAACnD,CAAlD,EAAqD,CAArD,EAAwDmD,QAAQ,CAACpD,CAAjE,EAAoEoD,QAAQ,CAACnD,CAA7E,EAAgFoD,YAAY,CAACQ,MAA7F,CAA7B;AACA,UAAMI,QAAQ,GAAGZ,YAAY,CAACY,QAA9B;AACA,UAAMC,WAAW,GAAG;AAChBC,QAAAA,KAAK,EAAEjG,YAAY,CAAC8C,UAAb,CAAwBI,UAAxB,CAAmC6C,QAAQ,CAACE,KAA5C,CADS;AAEhBC,QAAAA,IAAI,EAAElG,YAAY,CAAC8C,UAAb,CAAwBI,UAAxB,CAAmC6C,QAAQ,CAACG,IAA5C;AAFU,OAApB;;AAIA,UAAI,CAACF,WAAW,CAACC,KAAb,IAAsB,CAACD,WAAW,CAACE,IAAvC,EAA6C;AACzC;AACH;;AACDL,MAAAA,oBAAoB,CAACd,YAArB,CAAkC,CAAlC,EAAqC/E,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwCiD,WAAW,CAACC,KAApD,CAArC;AACAJ,MAAAA,oBAAoB,CAACd,YAArB,CAAkC,CAAlC,EAAqC/E,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwCiD,WAAW,CAACE,IAApD,CAArC;AACA/F,MAAAA,OAAO,CAACI,SAAR,GAAoBsF,oBAApB;AACA1F,MAAAA,OAAO,CAAC0D,IAAR;AACH;;;uCACyBoB,S,EAAW9E,O,EAASgG,Q,EAAUjB,Q,EAAU;AAC9D,UAAMkB,GAAG,GAAGD,QAAQ,CAAC1B,WAAT,EAAZ;AACA,UAAM4B,aAAa,GAAGpB,SAAS,CAACG,OAAV,CAAkBC,aAAlB,CAAgCC,KAAhC,CAAsCC,KAAtC,CAA4CjE,MAAlE;AACAnB,MAAAA,OAAO,CAACG,IAAR;AACA,UAAMqF,MAAM,GAAGQ,QAAQ,CAAC/B,SAAT,EAAf;AACA,UAAMkC,KAAK,GAAGH,QAAQ,CAACG,KAAvB;AACA,UAAMC,IAAI,GAAIrC,IAAI,CAAC0B,EAAL,GAAU,CAAX,GAAgBU,KAA7B;AACA,UAAME,KAAK,GAAG,CAACL,QAAQ,CAACM,MAAT,CAAgB3G,KAAjB,GAAyBoE,IAAI,CAAC0B,EAAL,GAAU,CAAjD;AACA,UAAMc,MAAM,GAAG,CAAf;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2BM,CAAC,EAA5B,EAAgC;AAC5BD,QAAAA,IAAI,CAACE,IAAL,CAAU;AACN/E,UAAAA,CAAC,EAAEsE,GAAG,CAACtE,CAAJ,GAAQ6D,MAAM,GAAGzB,IAAI,CAAC4C,GAAL,CAASN,KAAK,GAAGD,IAAI,GAAGK,CAAxB,CAAT,GAAsCF,MAD3C;AAEN3E,UAAAA,CAAC,EAAEqE,GAAG,CAACrE,CAAJ,GAAQ4D,MAAM,GAAGzB,IAAI,CAAC6C,GAAL,CAASP,KAAK,GAAGD,IAAI,GAAGK,CAAxB,CAAT,GAAsCF;AAF3C,SAAV;AAIH;;AACD,UAAMM,MAAM,GAAG,EAAf;AACA,UAAMC,YAAY,GAAGZ,aAAa,CAACa,MAAnC;;AACA,+BAAkBP,IAAlB,2BAAwB;AAAnB,YAAMQ,GAAG,YAAT;AACD,YAAMC,QAAQ,GAAGlD,IAAI,CAACmD,KAAL,CAAWnC,QAAQ,CAACnD,CAAT,GAAaoF,GAAG,CAACpF,CAA5B,EAA+BmD,QAAQ,CAACpD,CAAT,GAAaqF,GAAG,CAACrF,CAAhD,CAAjB;AACA,YAAMwF,IAAI,GAAGH,GAAG,CAACrF,CAAJ,GAAQmF,YAAY,GAAG/C,IAAI,CAAC4C,GAAL,CAAS,CAACM,QAAD,GAAYlD,IAAI,CAAC0B,EAAL,GAAU,CAA/B,CAApC;AACA,YAAM2B,IAAI,GAAGJ,GAAG,CAACpF,CAAJ,GAAQkF,YAAY,GAAG/C,IAAI,CAAC6C,GAAL,CAAS,CAACK,QAAD,GAAYlD,IAAI,CAAC0B,EAAL,GAAU,CAA/B,CAApC;AACAoB,QAAAA,MAAM,CAACH,IAAP,CAAY;AACRS,UAAAA,IAAI,EAAEA,IADE;AAERC,UAAAA,IAAI,EAAEA,IAFE;AAGRC,UAAAA,MAAM,EAAEL,GAAG,CAACrF,CAHJ;AAIR2F,UAAAA,MAAM,EAAEN,GAAG,CAACpF;AAJJ,SAAZ;AAMH;;AACD,UAAM2F,SAAS,GAAG1H,YAAY,CAAC8C,UAAb,CAAwBI,UAAxB,CAAmCmD,aAAa,CAAClD,KAAjD,CAAlB;;AACA,UAAI,CAACuE,SAAL,EAAgB;AACZ;AACH;;AACD,UAAMzE,WAAW,GAAGjD,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwC2E,SAAxC,CAApB;;AACA,WAAK,IAAId,GAAC,GAAGI,MAAM,CAACE,MAAP,GAAgB,CAA7B,EAAgCN,GAAC,IAAI,CAArC,EAAwCA,GAAC,EAAzC,EAA6C;AACzC,YAAMe,CAAC,GAAGf,GAAC,IAAII,MAAM,CAACE,MAAP,GAAgB,CAArB,GAAyB,CAAzB,GAA6BN,GAAC,GAAG,CAA3C;AACAzG,QAAAA,OAAO,CAACsF,SAAR;AACAtF,QAAAA,OAAO,CAACyH,MAAR,CAAeZ,MAAM,CAACJ,GAAD,CAAN,CAAUY,MAAzB,EAAiCR,MAAM,CAACJ,GAAD,CAAN,CAAUa,MAA3C;AACAtH,QAAAA,OAAO,CAAC0H,MAAR,CAAeb,MAAM,CAACW,CAAD,CAAN,CAAUH,MAAzB,EAAiCR,MAAM,CAACW,CAAD,CAAN,CAAUF,MAA3C;AACAtH,QAAAA,OAAO,CAAC0H,MAAR,CAAeb,MAAM,CAACW,CAAD,CAAN,CAAUL,IAAzB,EAA+BN,MAAM,CAACW,CAAD,CAAN,CAAUJ,IAAzC;AACApH,QAAAA,OAAO,CAAC0H,MAAR,CAAeb,MAAM,CAACJ,GAAD,CAAN,CAAUU,IAAzB,EAA+BN,MAAM,CAACJ,GAAD,CAAN,CAAUW,IAAzC;AACApH,QAAAA,OAAO,CAACI,SAAR,GAAoB0C,WAApB;AACA9C,QAAAA,OAAO,CAAC0D,IAAR;AACH;;AACD1D,MAAAA,OAAO,CAACQ,OAAR;AACH;;;iCACmBsE,S,EAAW9E,O,EAASgG,Q,EAAU2B,K,EAAOC,c,EAAgBC,gB,EAAkB9G,c,EAAgBC,S,EAAWwE,M,EAAQtE,O,EAASC,M,EAAQ;AAC3I,UAAM8E,GAAG,GAAGD,QAAQ,CAAC1B,WAAT,EAAZ;AACAtE,MAAAA,OAAO,CAACG,IAAR;AACAH,MAAAA,OAAO,CAAC8H,SAAR,CAAkB7B,GAAG,CAACtE,CAAtB,EAAyBsE,GAAG,CAACrE,CAA7B;AACA5B,MAAAA,OAAO,CAACsF,SAAR;AACA,UAAMe,KAAK,GAAGL,QAAQ,CAACM,MAAT,CAAgB3G,KAAhB,IAAyBqG,QAAQ,CAAC+B,gBAAT,CAA0BzB,MAA1B,CAAiC0B,IAAjC,GAAwChC,QAAQ,CAACiC,SAAjD,GAA6D,CAAtF,CAAd;;AACA,UAAI5B,KAAK,KAAK,CAAd,EAAiB;AACbrG,QAAAA,OAAO,CAACsG,MAAR,CAAeD,KAAf;AACH;;AACD,UAAItF,cAAJ,EAAoB;AAChBf,QAAAA,OAAO,CAACyC,wBAAR,GAAmCzB,SAAnC;AACH;;AACD,UAAM8B,WAAW,GAAGkD,QAAQ,CAAClD,WAA7B;;AACA,UAAI3B,MAAM,CAAC0B,MAAP,IAAiBC,WAArB,EAAkC;AAC9B9C,QAAAA,OAAO,CAACiD,UAAR,GAAqB9B,MAAM,CAAC+B,IAA5B;AACAlD,QAAAA,OAAO,CAAC8C,WAAR,GAAsBjD,YAAY,CAAC8C,UAAb,CAAwBC,eAAxB,CAAwCE,WAAxC,CAAtB;AACA9C,QAAAA,OAAO,CAACkI,aAAR,GAAwB/G,MAAM,CAACgH,MAAP,CAAcxG,CAAtC;AACA3B,QAAAA,OAAO,CAACoI,aAAR,GAAwBjH,MAAM,CAACgH,MAAP,CAAcvG,CAAtC;AACH;;AACD,UAAIgG,cAAJ,EAAoB;AAChB5H,QAAAA,OAAO,CAACI,SAAR,GAAoBwH,cAApB;AACH;;AACD,UAAMzE,MAAM,GAAG6C,QAAQ,CAAC7C,MAAxB;AACAnD,MAAAA,OAAO,CAACwC,SAAR,GAAoBwD,QAAQ,CAACqC,WAA7B;;AACA,UAAIR,gBAAJ,EAAsB;AAClB7H,QAAAA,OAAO,CAAC0C,WAAR,GAAsBmF,gBAAtB;AACH;;AACDjI,MAAAA,WAAW,CAAC0I,SAAZ,CAAsBxD,SAAtB,EAAiC9E,OAAjC,EAA0CgG,QAA1C,EAAoDR,MAApD,EAA4DtE,OAA5D,EAAqEyG,KAArE;;AACA,UAAIxE,MAAM,CAAC7C,KAAP,GAAe,CAAnB,EAAsB;AAClBN,QAAAA,OAAO,CAACmD,MAAR;AACH;;AACD,UAAI6C,QAAQ,CAACuC,KAAb,EAAoB;AAChBvI,QAAAA,OAAO,CAACwI,SAAR;AACH;;AACD,UAAIxC,QAAQ,CAACtC,IAAb,EAAmB;AACf1D,QAAAA,OAAO,CAAC0D,IAAR;AACH;;AACD1D,MAAAA,OAAO,CAACQ,OAAR;AACAR,MAAAA,OAAO,CAACG,IAAR;AACAH,MAAAA,OAAO,CAAC8H,SAAR,CAAkB7B,GAAG,CAACtE,CAAtB,EAAyBsE,GAAG,CAACrE,CAA7B;;AACA,UAAIyE,KAAK,KAAK,CAAd,EAAiB;AACbrG,QAAAA,OAAO,CAACsG,MAAR,CAAeD,KAAf;AACH;;AACD,UAAItF,cAAJ,EAAoB;AAChBf,QAAAA,OAAO,CAACyC,wBAAR,GAAmCzB,SAAnC;AACH;;AACDpB,MAAAA,WAAW,CAAC6I,oBAAZ,CAAiC3D,SAAjC,EAA4C9E,OAA5C,EAAqDgG,QAArD,EAA+DR,MAA/D,EAAuEtE,OAAvE,EAAgFyG,KAAhF;AACA3H,MAAAA,OAAO,CAACQ,OAAR;AACH;;;8BACgBsE,S,EAAW9E,O,EAASgG,Q,EAAUR,M,EAAQtE,O,EAASyG,K,EAAO;AACnE,UAAI,CAAC3B,QAAQ,CAAC0C,KAAd,EAAqB;AACjB;AACH;;AACD,UAAMC,MAAM,GAAG7D,SAAS,CAAC8D,OAAV,CAAkBC,GAAlB,CAAsB7C,QAAQ,CAAC0C,KAA/B,CAAf;;AACA,UAAI,CAACC,MAAL,EAAa;AACT;AACH;;AACDA,MAAAA,MAAM,CAACG,IAAP,CAAY9I,OAAZ,EAAqBgG,QAArB,EAA+BR,MAA/B,EAAuCtE,OAAvC,EAAgDyG,KAAK,CAAChI,KAAtD,EAA6DmF,SAAS,CAACiE,MAAV,CAAiBC,UAA9E;AACH;;;yCAC2BlE,S,EAAW9E,O,EAASgG,Q,EAAUR,M,EAAQtE,O,EAASyG,K,EAAO;AAC9E,UAAI,CAAC3B,QAAQ,CAAC0C,KAAd,EAAqB;AACjB;AACH;;AACD,UAAMC,MAAM,GAAG7D,SAAS,CAAC8D,OAAV,CAAkBC,GAAlB,CAAsB7C,QAAQ,CAAC0C,KAA/B,CAAf;;AACA,UAAI,EAAEC,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACM,WAAzD,CAAJ,EAA2E;AACvE;AACH;;AACDN,MAAAA,MAAM,CAACM,WAAP,CAAmBjJ,OAAnB,EAA4BgG,QAA5B,EAAsCR,MAAtC,EAA8CtE,OAA9C,EAAuDyG,KAAK,CAAChI,KAA7D,EAAoEmF,SAAS,CAACiE,MAAV,CAAiBC,UAArF;AACH;;;+BACiBhJ,O,EAASkJ,M,EAAQvB,K,EAAO;AACtC,UAAIuB,MAAM,CAACJ,IAAP,KAAgBK,SAApB,EAA+B;AAC3BnJ,QAAAA,OAAO,CAACG,IAAR;AACA+I,QAAAA,MAAM,CAACJ,IAAP,CAAY9I,OAAZ,EAAqB2H,KAArB;AACA3H,QAAAA,OAAO,CAACQ,OAAR;AACH;AACJ;;;6BACeR,O,EAASU,K,EAAOC,G,EAAK;AACjCX,MAAAA,OAAO,CAACsF,SAAR;AACAtF,MAAAA,OAAO,CAACyH,MAAR,CAAe/G,KAAK,CAACiB,CAArB,EAAwBjB,KAAK,CAACkB,CAA9B;AACA5B,MAAAA,OAAO,CAAC0H,MAAR,CAAe/G,GAAG,CAACgB,CAAnB,EAAsBhB,GAAG,CAACiB,CAA1B;AACA5B,MAAAA,OAAO,CAACwI,SAAR;AACH;;;iCACmBxI,O,EAAS4D,E,EAAIC,E,EAAIuF,E,EAAI;AACrCpJ,MAAAA,OAAO,CAACsF,SAAR;AACAtF,MAAAA,OAAO,CAACyH,MAAR,CAAe7D,EAAE,CAACjC,CAAlB,EAAqBiC,EAAE,CAAChC,CAAxB;AACA5B,MAAAA,OAAO,CAAC0H,MAAR,CAAe7D,EAAE,CAAClC,CAAlB,EAAqBkC,EAAE,CAACjC,CAAxB;AACA5B,MAAAA,OAAO,CAAC0H,MAAR,CAAe0B,EAAE,CAACzH,CAAlB,EAAqByH,EAAE,CAACxH,CAAxB;AACA5B,MAAAA,OAAO,CAACwI,SAAR;AACH;;;;;;AAEL9I,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CanvasUtils = void 0;\nconst ColorUtils_1 = require(\"./ColorUtils\");\nconst NumberUtils_1 = require(\"./NumberUtils\");\nclass CanvasUtils {\n    static paintBase(context, dimension, baseColor) {\n        context.save();\n        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n        context.fillRect(0, 0, dimension.width, dimension.height);\n        context.restore();\n    }\n    static clear(context, dimension) {\n        context.clearRect(0, 0, dimension.width, dimension.height);\n    }\n    static drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n        let drawn = false;\n        if (NumberUtils_1.NumberUtils.getDistance(begin, end) <= maxDistance) {\n            CanvasUtils.drawLine(context, begin, end);\n            drawn = true;\n        }\n        else if (warp) {\n            let pi1;\n            let pi2;\n            const endNE = {\n                x: end.x - canvasSize.width,\n                y: end.y,\n            };\n            const d1 = NumberUtils_1.NumberUtils.getDistances(begin, endNE);\n            if (d1.distance <= maxDistance) {\n                const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n                pi1 = { x: 0, y: yi };\n                pi2 = { x: canvasSize.width, y: yi };\n            }\n            else {\n                const endSW = {\n                    x: end.x,\n                    y: end.y - canvasSize.height,\n                };\n                const d2 = NumberUtils_1.NumberUtils.getDistances(begin, endSW);\n                if (d2.distance <= maxDistance) {\n                    const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                    const xi = -yi / (d2.dy / d2.dx);\n                    pi1 = { x: xi, y: 0 };\n                    pi2 = { x: xi, y: canvasSize.height };\n                }\n                else {\n                    const endSE = {\n                        x: end.x - canvasSize.width,\n                        y: end.y - canvasSize.height,\n                    };\n                    const d3 = NumberUtils_1.NumberUtils.getDistances(begin, endSE);\n                    if (d3.distance <= maxDistance) {\n                        const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                        const xi = -yi / (d3.dy / d3.dx);\n                        pi1 = { x: xi, y: yi };\n                        pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                    }\n                }\n            }\n            if (pi1 && pi2) {\n                CanvasUtils.drawLine(context, begin, pi1);\n                CanvasUtils.drawLine(context, end, pi2);\n                drawn = true;\n            }\n        }\n        if (!drawn) {\n            return;\n        }\n        context.lineWidth = width;\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        if (shadow.enable) {\n            const shadowColor = ColorUtils_1.ColorUtils.colorToRgb(shadow.color);\n            if (shadowColor) {\n                context.shadowBlur = shadow.blur;\n                context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            }\n        }\n        context.stroke();\n    }\n    static drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n        CanvasUtils.drawTriangle(context, pos1, pos2, pos3);\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        context.fillStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorTriangle, opacityTriangle);\n        context.fill();\n    }\n    static drawConnectLine(context, width, lineStyle, begin, end) {\n        context.save();\n        CanvasUtils.drawLine(context, begin, end);\n        context.lineWidth = width;\n        context.strokeStyle = lineStyle;\n        context.stroke();\n        context.restore();\n    }\n    static gradient(context, p1, p2, opacity) {\n        const gradStop = Math.floor(p2.getRadius() / p1.getRadius());\n        const color1 = p1.getFillColor();\n        const color2 = p2.getFillColor();\n        if (!color1 || !color2) {\n            return;\n        }\n        const sourcePos = p1.getPosition();\n        const destPos = p2.getPosition();\n        const midRgb = ColorUtils_1.ColorUtils.mix(color1, color2, p1.getRadius(), p2.getRadius());\n        const grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n        grad.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromHsl(color1, opacity));\n        grad.addColorStop(gradStop > 1 ? 1 : gradStop, ColorUtils_1.ColorUtils.getStyleFromRgb(midRgb, opacity));\n        grad.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromHsl(color2, opacity));\n        return grad;\n    }\n    static drawGrabLine(context, width, begin, end, colorLine, opacity) {\n        context.save();\n        CanvasUtils.drawLine(context, begin, end);\n        context.strokeStyle = ColorUtils_1.ColorUtils.getStyleFromRgb(colorLine, opacity);\n        context.lineWidth = width;\n        context.stroke();\n        context.restore();\n    }\n    static drawLight(container, context, mousePos) {\n        const lightOptions = container.options.interactivity.modes.light.area;\n        context.beginPath();\n        context.arc(mousePos.x, mousePos.y, lightOptions.radius, 0, 2 * Math.PI);\n        const gradientAmbientLight = context.createRadialGradient(mousePos.x, mousePos.y, 0, mousePos.x, mousePos.y, lightOptions.radius);\n        const gradient = lightOptions.gradient;\n        const gradientRgb = {\n            start: ColorUtils_1.ColorUtils.colorToRgb(gradient.start),\n            stop: ColorUtils_1.ColorUtils.colorToRgb(gradient.stop),\n        };\n        if (!gradientRgb.start || !gradientRgb.stop) {\n            return;\n        }\n        gradientAmbientLight.addColorStop(0, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.start));\n        gradientAmbientLight.addColorStop(1, ColorUtils_1.ColorUtils.getStyleFromRgb(gradientRgb.stop));\n        context.fillStyle = gradientAmbientLight;\n        context.fill();\n    }\n    static drawParticleShadow(container, context, particle, mousePos) {\n        const pos = particle.getPosition();\n        const shadowOptions = container.options.interactivity.modes.light.shadow;\n        context.save();\n        const radius = particle.getRadius();\n        const sides = particle.sides;\n        const full = (Math.PI * 2) / sides;\n        const angle = -particle.rotate.value + Math.PI / 4;\n        const factor = 1;\n        const dots = [];\n        for (let i = 0; i < sides; i++) {\n            dots.push({\n                x: pos.x + radius * Math.sin(angle + full * i) * factor,\n                y: pos.y + radius * Math.cos(angle + full * i) * factor,\n            });\n        }\n        const points = [];\n        const shadowLength = shadowOptions.length;\n        for (const dot of dots) {\n            const dotAngle = Math.atan2(mousePos.y - dot.y, mousePos.x - dot.x);\n            const endX = dot.x + shadowLength * Math.sin(-dotAngle - Math.PI / 2);\n            const endY = dot.y + shadowLength * Math.cos(-dotAngle - Math.PI / 2);\n            points.push({\n                endX: endX,\n                endY: endY,\n                startX: dot.x,\n                startY: dot.y,\n            });\n        }\n        const shadowRgb = ColorUtils_1.ColorUtils.colorToRgb(shadowOptions.color);\n        if (!shadowRgb) {\n            return;\n        }\n        const shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowRgb);\n        for (let i = points.length - 1; i >= 0; i--) {\n            const n = i == points.length - 1 ? 0 : i + 1;\n            context.beginPath();\n            context.moveTo(points[i].startX, points[i].startY);\n            context.lineTo(points[n].startX, points[n].startY);\n            context.lineTo(points[n].endX, points[n].endY);\n            context.lineTo(points[i].endX, points[i].endY);\n            context.fillStyle = shadowColor;\n            context.fill();\n        }\n        context.restore();\n    }\n    static drawParticle(container, context, particle, delta, fillColorValue, strokeColorValue, backgroundMask, composite, radius, opacity, shadow) {\n        const pos = particle.getPosition();\n        context.save();\n        context.translate(pos.x, pos.y);\n        context.beginPath();\n        const angle = particle.rotate.value + (particle.particlesOptions.rotate.path ? particle.pathAngle : 0);\n        if (angle !== 0) {\n            context.rotate(angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        const shadowColor = particle.shadowColor;\n        if (shadow.enable && shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = ColorUtils_1.ColorUtils.getStyleFromRgb(shadowColor);\n            context.shadowOffsetX = shadow.offset.x;\n            context.shadowOffsetY = shadow.offset.y;\n        }\n        if (fillColorValue) {\n            context.fillStyle = fillColorValue;\n        }\n        const stroke = particle.stroke;\n        context.lineWidth = particle.strokeWidth;\n        if (strokeColorValue) {\n            context.strokeStyle = strokeColorValue;\n        }\n        CanvasUtils.drawShape(container, context, particle, radius, opacity, delta);\n        if (stroke.width > 0) {\n            context.stroke();\n        }\n        if (particle.close) {\n            context.closePath();\n        }\n        if (particle.fill) {\n            context.fill();\n        }\n        context.restore();\n        context.save();\n        context.translate(pos.x, pos.y);\n        if (angle !== 0) {\n            context.rotate(angle);\n        }\n        if (backgroundMask) {\n            context.globalCompositeOperation = composite;\n        }\n        CanvasUtils.drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n        context.restore();\n    }\n    static drawShape(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!drawer) {\n            return;\n        }\n        drawer.draw(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n    static drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n            return;\n        }\n        const drawer = container.drawers.get(particle.shape);\n        if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n            return;\n        }\n        drawer.afterEffect(context, particle, radius, opacity, delta.value, container.retina.pixelRatio);\n    }\n    static drawPlugin(context, plugin, delta) {\n        if (plugin.draw !== undefined) {\n            context.save();\n            plugin.draw(context, delta);\n            context.restore();\n        }\n    }\n    static drawLine(context, begin, end) {\n        context.beginPath();\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n    }\n    static drawTriangle(context, p1, p2, p3) {\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.lineTo(p3.x, p3.y);\n        context.closePath();\n    }\n}\nexports.CanvasUtils = CanvasUtils;\n"]},"metadata":{},"sourceType":"script"}