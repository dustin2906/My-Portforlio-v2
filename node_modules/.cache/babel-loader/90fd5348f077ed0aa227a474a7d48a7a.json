{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plugins = void 0;\n\nclass Plugins {\n  static getPlugin(plugin) {\n    return Plugins.plugins.find(t => t.id === plugin);\n  }\n\n  static addPlugin(plugin) {\n    if (!Plugins.getPlugin(plugin.id)) {\n      Plugins.plugins.push(plugin);\n    }\n  }\n\n  static getAvailablePlugins(container) {\n    const res = new Map();\n\n    for (const plugin of Plugins.plugins) {\n      if (!plugin.needsPlugin(container.options)) {\n        continue;\n      }\n\n      res.set(plugin.id, plugin.getPlugin(container));\n    }\n\n    return res;\n  }\n\n  static loadOptions(options, sourceOptions) {\n    for (const plugin of Plugins.plugins) {\n      plugin.loadOptions(options, sourceOptions);\n    }\n  }\n\n  static getPreset(preset) {\n    return Plugins.presets.get(preset);\n  }\n\n  static addPreset(presetKey, options) {\n    if (!Plugins.getPreset(presetKey)) {\n      Plugins.presets.set(presetKey, options);\n    }\n  }\n\n  static addShapeDrawer(type, drawer) {\n    if (!Plugins.getShapeDrawer(type)) {\n      Plugins.drawers.set(type, drawer);\n    }\n  }\n\n  static getShapeDrawer(type) {\n    return Plugins.drawers.get(type);\n  }\n\n  static getSupportedShapes() {\n    return Plugins.drawers.keys();\n  }\n\n}\n\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Utils/Plugins.js"],"names":["Object","defineProperty","exports","value","Plugins","getPlugin","plugin","plugins","find","t","id","addPlugin","push","getAvailablePlugins","container","res","Map","needsPlugin","options","set","loadOptions","sourceOptions","getPreset","preset","presets","get","addPreset","presetKey","addShapeDrawer","type","drawer","getShapeDrawer","drawers","getSupportedShapes","keys"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMA,OAAN,CAAc;AACV,SAAOC,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,WAAOF,OAAO,CAACG,OAAR,CAAgBC,IAAhB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASJ,MAArC,CAAP;AACH;;AACD,SAAOK,SAAP,CAAiBL,MAAjB,EAAyB;AACrB,QAAI,CAACF,OAAO,CAACC,SAAR,CAAkBC,MAAM,CAACI,EAAzB,CAAL,EAAmC;AAC/BN,MAAAA,OAAO,CAACG,OAAR,CAAgBK,IAAhB,CAAqBN,MAArB;AACH;AACJ;;AACD,SAAOO,mBAAP,CAA2BC,SAA3B,EAAsC;AAClC,UAAMC,GAAG,GAAG,IAAIC,GAAJ,EAAZ;;AACA,SAAK,MAAMV,MAAX,IAAqBF,OAAO,CAACG,OAA7B,EAAsC;AAClC,UAAI,CAACD,MAAM,CAACW,WAAP,CAAmBH,SAAS,CAACI,OAA7B,CAAL,EAA4C;AACxC;AACH;;AACDH,MAAAA,GAAG,CAACI,GAAJ,CAAQb,MAAM,CAACI,EAAf,EAAmBJ,MAAM,CAACD,SAAP,CAAiBS,SAAjB,CAAnB;AACH;;AACD,WAAOC,GAAP;AACH;;AACD,SAAOK,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B,EAA2C;AACvC,SAAK,MAAMf,MAAX,IAAqBF,OAAO,CAACG,OAA7B,EAAsC;AAClCD,MAAAA,MAAM,CAACc,WAAP,CAAmBF,OAAnB,EAA4BG,aAA5B;AACH;AACJ;;AACD,SAAOC,SAAP,CAAiBC,MAAjB,EAAyB;AACrB,WAAOnB,OAAO,CAACoB,OAAR,CAAgBC,GAAhB,CAAoBF,MAApB,CAAP;AACH;;AACD,SAAOG,SAAP,CAAiBC,SAAjB,EAA4BT,OAA5B,EAAqC;AACjC,QAAI,CAACd,OAAO,CAACkB,SAAR,CAAkBK,SAAlB,CAAL,EAAmC;AAC/BvB,MAAAA,OAAO,CAACoB,OAAR,CAAgBL,GAAhB,CAAoBQ,SAApB,EAA+BT,OAA/B;AACH;AACJ;;AACD,SAAOU,cAAP,CAAsBC,IAAtB,EAA4BC,MAA5B,EAAoC;AAChC,QAAI,CAAC1B,OAAO,CAAC2B,cAAR,CAAuBF,IAAvB,CAAL,EAAmC;AAC/BzB,MAAAA,OAAO,CAAC4B,OAAR,CAAgBb,GAAhB,CAAoBU,IAApB,EAA0BC,MAA1B;AACH;AACJ;;AACD,SAAOC,cAAP,CAAsBF,IAAtB,EAA4B;AACxB,WAAOzB,OAAO,CAAC4B,OAAR,CAAgBP,GAAhB,CAAoBI,IAApB,CAAP;AACH;;AACD,SAAOI,kBAAP,GAA4B;AACxB,WAAO7B,OAAO,CAAC4B,OAAR,CAAgBE,IAAhB,EAAP;AACH;;AA1CS;;AA4CdhC,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAA,OAAO,CAACG,OAAR,GAAkB,EAAlB;AACAH,OAAO,CAACoB,OAAR,GAAkB,IAAIR,GAAJ,EAAlB;AACAZ,OAAO,CAAC4B,OAAR,GAAkB,IAAIhB,GAAJ,EAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Plugins = void 0;\nclass Plugins {\n    static getPlugin(plugin) {\n        return Plugins.plugins.find((t) => t.id === plugin);\n    }\n    static addPlugin(plugin) {\n        if (!Plugins.getPlugin(plugin.id)) {\n            Plugins.plugins.push(plugin);\n        }\n    }\n    static getAvailablePlugins(container) {\n        const res = new Map();\n        for (const plugin of Plugins.plugins) {\n            if (!plugin.needsPlugin(container.options)) {\n                continue;\n            }\n            res.set(plugin.id, plugin.getPlugin(container));\n        }\n        return res;\n    }\n    static loadOptions(options, sourceOptions) {\n        for (const plugin of Plugins.plugins) {\n            plugin.loadOptions(options, sourceOptions);\n        }\n    }\n    static getPreset(preset) {\n        return Plugins.presets.get(preset);\n    }\n    static addPreset(presetKey, options) {\n        if (!Plugins.getPreset(presetKey)) {\n            Plugins.presets.set(presetKey, options);\n        }\n    }\n    static addShapeDrawer(type, drawer) {\n        if (!Plugins.getShapeDrawer(type)) {\n            Plugins.drawers.set(type, drawer);\n        }\n    }\n    static getShapeDrawer(type) {\n        return Plugins.drawers.get(type);\n    }\n    static getSupportedShapes() {\n        return Plugins.drawers.keys();\n    }\n}\nexports.Plugins = Plugins;\nPlugins.plugins = [];\nPlugins.presets = new Map();\nPlugins.drawers = new Map();\n"]},"metadata":{},"sourceType":"script"}