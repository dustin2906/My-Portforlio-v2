{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collider = void 0;\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst Utils_1 = require(\"../../Utils\");\n\nclass Collider {\n  constructor(container) {\n    this.container = container;\n  }\n\n  static bounce(p1, p2) {\n    Utils_1.Utils.circleBounce(Utils_1.Utils.circleBounceDataFromParticle(p1), Utils_1.Utils.circleBounceDataFromParticle(p2));\n  }\n\n  static destroy(p1, p2) {\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n      p1.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n      p2.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n      if (p1.getRadius() >= p2.getRadius()) {\n        p2.destroy();\n      } else {\n        p1.destroy();\n      }\n    }\n  }\n\n  isEnabled(particle) {\n    return particle.particlesOptions.collisions.enable;\n  }\n\n  reset() {}\n\n  interact(p1) {\n    const container = this.container;\n    const pos1 = p1.getPosition();\n    const query = container.particles.quadTree.queryCircle(pos1, p1.getRadius() * 2);\n\n    for (const p2 of query) {\n      if (p1 === p2 || !p2.particlesOptions.collisions.enable || p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode || p2.destroyed || p2.spawning) {\n        continue;\n      }\n\n      const pos2 = p2.getPosition();\n      const dist = Utils_1.NumberUtils.getDistance(pos1, pos2);\n      const radius1 = p1.getRadius();\n      const radius2 = p2.getRadius();\n      const distP = radius1 + radius2;\n\n      if (dist <= distP) {\n        this.resolveCollision(p1, p2);\n      }\n    }\n  }\n\n  resolveCollision(p1, p2) {\n    switch (p1.particlesOptions.collisions.mode) {\n      case Enums_1.CollisionMode.absorb:\n        {\n          this.absorb(p1, p2);\n          break;\n        }\n\n      case Enums_1.CollisionMode.bounce:\n        {\n          Collider.bounce(p1, p2);\n          break;\n        }\n\n      case Enums_1.CollisionMode.destroy:\n        {\n          Collider.destroy(p1, p2);\n          break;\n        }\n    }\n  }\n\n  absorb(p1, p2) {\n    const container = this.container;\n    const fps = container.options.fpsLimit / 1000;\n\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n      p1.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n      p2.destroy();\n    } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n      if (p1.getRadius() >= p2.getRadius()) {\n        const factor = Utils_1.NumberUtils.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n        p1.size.value += factor;\n        p2.size.value -= factor;\n\n        if (p2.getRadius() <= container.retina.pixelRatio) {\n          p2.size.value = 0;\n          p2.destroy();\n        }\n      } else {\n        const factor = Utils_1.NumberUtils.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n        p1.size.value -= factor;\n        p2.size.value += factor;\n\n        if (p1.getRadius() <= container.retina.pixelRatio) {\n          p1.size.value = 0;\n          p1.destroy();\n        }\n      }\n    }\n  }\n\n}\n\nexports.Collider = Collider;","map":{"version":3,"sources":["/Users/thoarrow/coder/delete/My-Portforlio-v2/node_modules/tsparticles/dist/Interactions/Particles/Collider.js"],"names":["Object","defineProperty","exports","value","Collider","Enums_1","require","Utils_1","constructor","container","bounce","p1","p2","Utils","circleBounce","circleBounceDataFromParticle","destroy","getRadius","undefined","isEnabled","particle","particlesOptions","collisions","enable","reset","interact","pos1","getPosition","query","particles","quadTree","queryCircle","mode","destroyed","spawning","pos2","dist","NumberUtils","getDistance","radius1","radius2","distP","resolveCollision","CollisionMode","absorb","fps","options","fpsLimit","factor","clamp","size","retina","pixelRatio"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Collider = void 0;\nconst Enums_1 = require(\"../../Enums\");\nconst Utils_1 = require(\"../../Utils\");\nclass Collider {\n    constructor(container) {\n        this.container = container;\n    }\n    static bounce(p1, p2) {\n        Utils_1.Utils.circleBounce(Utils_1.Utils.circleBounceDataFromParticle(p1), Utils_1.Utils.circleBounceDataFromParticle(p2));\n    }\n    static destroy(p1, p2) {\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n            p2.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n            if (p1.getRadius() >= p2.getRadius()) {\n                p2.destroy();\n            }\n            else {\n                p1.destroy();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return particle.particlesOptions.collisions.enable;\n    }\n    reset() {\n    }\n    interact(p1) {\n        const container = this.container;\n        const pos1 = p1.getPosition();\n        const query = container.particles.quadTree.queryCircle(pos1, p1.getRadius() * 2);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.particlesOptions.collisions.enable ||\n                p1.particlesOptions.collisions.mode !== p2.particlesOptions.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            const dist = Utils_1.NumberUtils.getDistance(pos1, pos2);\n            const radius1 = p1.getRadius();\n            const radius2 = p2.getRadius();\n            const distP = radius1 + radius2;\n            if (dist <= distP) {\n                this.resolveCollision(p1, p2);\n            }\n        }\n    }\n    resolveCollision(p1, p2) {\n        switch (p1.particlesOptions.collisions.mode) {\n            case Enums_1.CollisionMode.absorb: {\n                this.absorb(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.bounce: {\n                Collider.bounce(p1, p2);\n                break;\n            }\n            case Enums_1.CollisionMode.destroy: {\n                Collider.destroy(p1, p2);\n                break;\n            }\n        }\n    }\n    absorb(p1, p2) {\n        const container = this.container;\n        const fps = container.options.fpsLimit / 1000;\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n            p1.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n            p2.destroy();\n        }\n        else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n            if (p1.getRadius() >= p2.getRadius()) {\n                const factor = Utils_1.NumberUtils.clamp(p1.getRadius() / p2.getRadius(), 0, p2.getRadius()) * fps;\n                p1.size.value += factor;\n                p2.size.value -= factor;\n                if (p2.getRadius() <= container.retina.pixelRatio) {\n                    p2.size.value = 0;\n                    p2.destroy();\n                }\n            }\n            else {\n                const factor = Utils_1.NumberUtils.clamp(p2.getRadius() / p1.getRadius(), 0, p1.getRadius()) * fps;\n                p1.size.value -= factor;\n                p2.size.value += factor;\n                if (p1.getRadius() <= container.retina.pixelRatio) {\n                    p1.size.value = 0;\n                    p1.destroy();\n                }\n            }\n        }\n    }\n}\nexports.Collider = Collider;\n"]},"metadata":{},"sourceType":"script"}